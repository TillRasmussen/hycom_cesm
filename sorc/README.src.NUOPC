README.src.NUOPC:

The Makefile sources ../config/$(ARCH)_$(TYPE) where ARCH defines the target
machine architecture, and TYPE is the chosen parallelization strategy.  Select
TYPE equal to "nuopc" in order to build HYCOM as a NUOPC compliant ESMF
component. Check the ../config directory to see whether a "nuopc" TYPE
configuration exists for the desired ARCH before proceeding.

Building:
========

The HYCOM build system uses the ESMFMKFILE mechanism to access the ESMF
installation on your system. All you need to do to build HYCOM against a
sepcific ESMF installation is to ensure that the ESMFMKFILE environment
variable in your shell is set. It must point to the "esmf.mk" file of the
ESMF installation you want to use. After that you can build the NUOPC-capped
HYCOM component:

  gmake ARCH=<arch> TYPE=nuopc nuopc

Currently there are four choices of <arch> supported for nuopc:
  * "AlinuxGNU"   - GNU compiler on linux (arctic bi-polar halo)
  * "linuxGNU"    - GNU compiler on linux (standard halo)
  * "AintelIFC"   - Intel compiler on linux (arctic bi-polar halo)
  * "intelIFC"    - Intel compiler on linux (standard halo)

The successful execution of the make command will create three files:
  1) hycom_nuopc.mk    - the NUOPC compliant component makefile fragment
  2) hycom.mod         - the HYCOM Fortran module
  3) libhycom_nuopc.a  - the HYCOM object archive

Installing:
==========

  gmake ARCH=<arch> TYPE=nuopc DESTDIR=<destdir> INSTDIR=<instdir> nuopcinstall
  
This command create a new directory <destdir>/<instdir> and installs the three
files created during building into this directory. The resulting installation
is completely self-contained and independent of the source directory structure.

Both DESTDIR and INSTDIR are optional variables that can be used to customize
the location of the resulting installation:

  * The default for DESTDIR is the current working directory.
  
  * The default for INSTDIR is "HYCOM_yyyy-mm-dd-hh-MM-ss", where
    is the timestamp of when the installation process was executed.
    
Building HYCOM into a NUOPC based ESMF application:
==================================================

The simplest way to integrate HYCOM as an external component dependency into a
NUOPC based ESMF application is to include the "hycom_nuopc.mk" makefile
fragment from the application build system. For details on how to leverage the
NUOPC compliant component makefile fragment see the section on "Standardized
Component Dependencies" in the NUOPC Layer reference manual. The manual is
available online at https://earthsystemcog.org/projects/nuopc/refmans.

Using the HYCOM component in a NUOPC based ESMF application:
===========================================================

The HYCOM component follows the NUOPC Layer conventions for ESMF components as
described in the NUOPC Layer reference manual. Special aspects of the current
implementation are:

  1) The import and export Fields are defined on a Grid with mask, where a
     0 (zero) value in the mask corresponds to a masked element, while 1 (one)
     indicates a valid element.
     
     The masks need to be considered when regridding to or from the HYCOM
     import or export Fields. If this regridding happens within Connector
     components, then the CplList Attribute must be set to contain the
     following connection options:
      
        "srcMaskValues=0"         - for Connectors that connect from HYCOM
        "dstMaskValues=0"         - for Connectors that connect to HYCOM
        
Implementation notes:
====================

The top level entry points into the native HYCOM model (HYCOM_Init, HYCOM_Run,
HYCOM_Final) are provided by module MOD_HYCOM. A NUOPC component cap is 
implemented on top of MOD_HYCOM, in a module called HYCOM. Connection into the
HYCOM native data structures is implemented by a glue layer in module
HYCOM_NUOPC_GLUE. The following diagram depicts the details of the
implementation.


module HYCOM     <-- in hycom_nuopc.F90 - NUOPC compliant ESMF component cap
  |
  +--- derives from NUOPC_Model
  |
  +--- uses MOD_HYCOM   <-- in mod_hycom.F - HYCOM_Init, HYCOM_Run, HYCOM_Final
  |
  +--- uses hycom_nuopc_glue  <-- in hycom_nuopc_glue.F90 glue code into HYCOM
            |
            +-- uses mod_xc <-- in mod_xc.F - HYCOM native exchange data strucs
            |
            +-- uses hycom_nuopc_glue_common_blocks 
                     |        +-- in hycom_nuopc_glue_common_blocks.F 
                     |            - interface to HYCOM "common_blocks.h"
                     |
                     +-- uses mod_xc <-- in mod_xc.F - HYCOM native exchange
